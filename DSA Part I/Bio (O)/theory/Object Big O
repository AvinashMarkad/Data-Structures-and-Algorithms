# Big O Notation for Objects

Big O notation is a way to describe the performance or complexity of an algorithm. When dealing with objects in JavaScript, it's important to understand the time complexity of common operations.

## Common Operations and Their Complexities

1. **Insertion**: Adding a new key-value pair to an object is an O(1) operation.
2. **Removal**: Deleting a key-value pair from an object is an O(1) operation.
3. **Access**: Accessing a value by its key is an O(1) operation.
4. **Search**: Searching for a key in an object is an O(n) operation, where n is the number of keys in the object.
5. **Object.keys()**: Retrieving all the keys of an object is an O(n) operation.

## Example in JavaScript

```javascript
// Creating an object in javascript

let person = {
  name: "John",
  age: 30,
  occupation: "Developer",
};

// Insertion - O(1)
person.city = "New York";

// Access - O(1)
console.log(person.name); // Output: John

// Removal - O(1)
delete person.age;

// Search - O(n)
let hasOccupation = "occupation" in person; // Output: true

// Object.keys() - O(n)
let keys = Object.keys(person); // Output: ["name", "occupation", "city"]
```

In this example, we demonstrate the insertion, access, removal, search, and retrieval of keys from an object, along with their respective time complexities.
